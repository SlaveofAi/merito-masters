
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ivssecjzxhabahdapfko.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml2c3NlY2p6eGhhYmFoZGFwZmtvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwOTk4OTEsImV4cCI6MjA1ODY3NTg5MX0.FCZlLf3VU9nFE-4tnNNJewUQFhX0F_OV8F1XQm-VLmI";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      },
      heartbeatIntervalMs: 5000,
      reconnectAfterMs: (retryCount) => {
        // Exponential backoff with a min delay of 1s and max of 15s
        const delay = Math.min(1000 * (2 ** retryCount), 15000);
        console.log(`Realtime reconnecting in ${delay}ms (attempt ${retryCount})`);
        return delay;
      },
      // Add more aggressive timeout to close stale connections
      timeout: 30000
    }
  }
);

// Add a global utility to check if the WebSocket is working
export const checkRealtimeConnection = async () => {
  try {
    // Create a test channel
    const testChannel = supabase.channel('connection-test');
    
    return new Promise((resolve) => {
      // Set a timeout for connection test
      const timeoutId = setTimeout(() => {
        resolve(false);  // Connection test failed
      }, 5000);
      
      // Subscribe to the channel
      testChannel.subscribe((status) => {
        if (status === 'SUBSCRIBED') {
          clearTimeout(timeoutId);
          // Clean up the test channel
          supabase.removeChannel(testChannel);
          resolve(true);  // Connection test successful
        } else if (status === 'CLOSED' || status === 'CHANNEL_ERROR') {
          clearTimeout(timeoutId);
          resolve(false);  // Connection test failed
        }
      });
    });
  } catch (error) {
    console.error('Error testing Realtime connection:', error);
    return false;
  }
};
