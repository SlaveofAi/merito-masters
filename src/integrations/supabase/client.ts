
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ivssecjzxhabahdapfko.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml2c3NlY2p6eGhhYmFoZGFwZmtvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwOTk4OTEsImV4cCI6MjA1ODY3NTg5MX0.FCZlLf3VU9nFE-4tnNNJewUQFhX0F_OV8F1XQm-VLmI";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    },
    // Enhanced configuration for better reliability
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    },
    global: {
      fetch: (...args) => {
        // Add retry logic for fetch operations
        return fetch(...args).catch(err => {
          console.error('Fetch error in Supabase client:', err);
          return fetch(...args);
        });
      },
      headers: {
        'X-Client-Info': 'lovable-app',
      }
    }
  }
);

// Connection check function with retries
export const checkRealtimeConnection = async (retries = 3): Promise<boolean> => {
  let attempts = 0;
  
  while (attempts < retries) {
    try {
      console.log(`Attempting to check Supabase realtime connection (attempt ${attempts + 1}/${retries})`);
      
      // Create a temporary channel to test connection
      const tempChannel = supabase.channel(`connection-test-${Date.now()}`);
      
      const status = await new Promise<string>((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Connection check timeout'));
        }, 5000);
        
        const subscription = tempChannel.subscribe((status) => {
          clearTimeout(timeout);
          resolve(status);
          subscription.unsubscribe();
        });
      });
      
      await supabase.removeChannel(tempChannel);
      console.log(`Realtime connection check result: ${status}`);
      return status === 'SUBSCRIBED';
    } catch (e) {
      console.error(`Realtime connection check failed (attempt ${attempts + 1}/${retries}):`, e);
      attempts++;
      
      if (attempts >= retries) {
        console.error('All realtime connection check attempts failed');
        return false;
      }
      
      // Wait before retrying
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  return false;
};
